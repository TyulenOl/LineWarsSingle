#pragma kernel CSMain

struct NodesBuffer
{
    float4 Color;
    float Visibility;
};

RWTexture2D<float4> _VisibilityMaskV3;

int _NodesCount;
float _Sensitivity = 0.05;

StructuredBuffer<NodesBuffer> _NodesBuffer;
Texture2D<float4> _VisibilityMap;

bool compareFloat(float a, float b)
{
    return abs(a-b) <= _Sensitivity;
}

bool compareFloat4(float4 a, float4 b)
{
    return compareFloat(a.x, b.x)
        && compareFloat(a.y, b.y)
        && compareFloat(a.z, b.z)
        && compareFloat(a.w, b.w);
}


[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    _VisibilityMaskV3[id.xy] = 0;
    for (int i = 0; i < _NodesCount; i++)
    {
        const float4 nodeColor = _NodesBuffer[i].Color;
        const float visibility = _NodesBuffer[i].Visibility;
        
        const float4 pixelColor = _VisibilityMap[id.xy];
        
        if (compareFloat4(nodeColor, pixelColor))
        {
            _VisibilityMaskV3[id.xy] = visibility;
        }
    }
}


